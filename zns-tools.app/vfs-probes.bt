#include <linux/path.h>
#include <linux/fs.h>
#include <linux/fcntl.h>

BEGIN 
{
    // TODO: do we want to track some global parent dir (e.g., only a single file system, or probably easier we do this in post processing)
    @logging = 0;
}

k:vfs_open
{
    $dentry = (struct dentry*)((struct path *)arg0)->dentry;
    $d_inode = (struct inode *)$dentry->d_inode;

    @vfs_open[nsecs, pid, tid] = ($d_inode->i_ino); 

    if (@logging) {
        printf("%s <nsecs, pid, tid, i_ino>: <%lu, %lu, %lu, %lu>\n", func, nsecs, pid, tid, $d_inode->i_ino);
    }
}

k:vfs_create
{
    $inode = (struct inode *)arg1;
    @vfs_create[nsecs, pid, tid] = ($inode->i_ino); 

    if (@logging) {
        printf("%s <nsecs, pid, tid, i_ino>: <%lu, %lu, %lu, %lu>\n", func, nsecs, pid, tid, $inode->i_ino);
    }
}

k:do_fcntl
{
    $cmd = (int64)arg1;

    if ($cmd == F_SET_RW_HINT) {
        $f_inode = (struct inode *) ((struct file *)arg3)->f_inode;
        // annotate rw_hint as uptr, as it is a userspace pointer which bpftrace cannot infer
        $argp = uptr(arg2);
        // invalid hints we ignore
        if (*$argp >=0 && *$argp < 6) {
            @fcntl_set_rw_hint[nsecs, pid, tid] = ($f_inode->i_ino, *$argp);

            if (@logging) {
                printf("%s <nsecs, pid, tid, i_ino, rw_hint>: <%lu, %lu, %lu, %lu, %lu>\n", func, nsecs, pid, tid, $f_inode->i_ino, *$argp);
            }
        }
    }
}

k:vfs_fsync
{
    $f_inode = (struct inode *) ((struct file *)arg0)->f_inode;
    @vfs_fsync[nsecs, pid, tid] = ($f_inode->i_ino); 

    if (@logging) {
        printf("%s <nsecs, pid, tid, i_ino>: <%lu, %lu, %lu, %lu>\n", func, nsecs, pid, tid, $f_inode->i_ino);
    }
}

k:vfs_rename
{
    $renamedata = (struct renamedata *)arg0;
    $old_dentry = (struct dentry *)$renamedata->old_dentry;
    $d_inode = (struct inode *)$old_dentry->d_inode;
    @vfs_rename[nsecs, pid, tid] = ($d_inode->i_ino); 

    if (@logging) {
        printf("%s <nsecs, pid, tid, i_ino>: <%lu, %lu, %lu, %lu>\n", func, nsecs, pid, tid, $d_inode->i_ino);
    }
}

k:vfs_unlink 
{
    $dentry = (struct dentry *)arg2;
    $inode = (struct inode *)$dentry->d_inode;
    @vfs_unlink[nsecs, pid, tid] = ($inode->i_ino); 

    if (@logging) {
        printf("%s <nsecs, pid, tid, i_ino>: <%lu, %lu, %lu, %lu>\n", func, nsecs, pid, tid, $inode->i_ino);
    }
}

interval:ms:100
{
    print(@vfs_open);
    clear(@vfs_open);
    print(@vfs_create);
    clear(@vfs_create);
    print(@fcntl_set_rw_hint);
    clear(@fcntl_set_rw_hint);
    print(@vfs_fsync);
    clear(@vfs_fsync);
    print(@vfs_rename);
    clear(@vfs_rename);
    print(@vfs_unlink);
    clear(@vfs_unlink);
}

interval:s:5
{
    exit();
}

END 
{
    clear(@logging);
}
